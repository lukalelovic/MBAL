{
    "ts-admin-user-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: PUT": {
                "ts-user-service": [
                    {
                        "arguments": "Arguments: [@RequestBody UserDto user, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.updateUser"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-user-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.getAllUser"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-user-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.deleteUserById"
                    }
                ]
            }
        }
    },
    "ts-basic-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.BasicController.queryForTravel"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.BasicController.queryForStationId"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: GET": {
                "ts-price-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @PathVariable String trainType, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: price.controller.PriceController.query"
                    }
                ],
                "ts-train-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.retrieve"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-route-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryById"
                    }
                ]
            }
        }
    },
    "ts-cancel-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: PUT": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order orderInfo, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.saveOrderInfo"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order orderInfo, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.saveOrderInfo"
                    }
                ]
            },
            "HTTP Verb: POST": {
                "ts-notification-service": [
                    {
                        "arguments": "Arguments: [@RequestBody NotifyInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: boolean",
                        "endPointName": "Endpoint function: notification.controller.NotificationController.order_cancel_success"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-inside-payment-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @PathVariable String money, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: inside_payment.controller.InsidePaymentController.drawBack"
                    }
                ],
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.getOrderById"
                    }
                ],
                "ts-user-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.getUserByUserId"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.getOrderById"
                    }
                ]
            }
        }
    },
    "ts-travel2-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripAllDetailInfo gtdi, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.getTripAllDetailInfo"
                    }
                ],
                "ts-admin-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TravelInfo routeIds, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.createTrip"
                    }
                ],
                "ts-route-plan-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.queryInfo"
                    },
                    {
                        "arguments": "Arguments: [@RequestBody ArrayList<String> routeIds, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.getTripsByRouteId"
                    }
                ],
                "ts-travel-plan-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.queryInfo"
                    }
                ]
            },
            "HTTP Verb: PUT": {
                "ts-admin-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TravelInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.updateTrip"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-admin-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.adminQueryAll"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.getRouteByTripId"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.getTrainTypeByTripId"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.deleteTrip"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForTravel"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.getLeftTicketOfInterval"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String name, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForStationId"
                    }
                ],
                "ts-train-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.retrieve"
                    }
                ],
                "ts-route-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryById"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable Date travelDate, @PathVariable String trainNumber, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.calculateSoldTicket"
                    }
                ]
            }
        }
    },
    "ts-price-service": {
        "DependsOn": {
            "HTTP Verb: PUT": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody PriceConfig info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: price.controller.PriceController.update"
                    }
                ]
            },
            "HTTP Verb: POST": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody PriceConfig info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: price.controller.PriceController.create"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-basic-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @PathVariable String trainType, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: price.controller.PriceController.query"
                    }
                ],
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: price.controller.PriceController.queryAll"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody PriceConfig info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: price.controller.PriceController.delete"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-travel-service": {
        "DependsOn": {
            "HTTP Verb: PUT": {
                "ts-admin-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TravelInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.updateTrip"
                    }
                ]
            },
            "HTTP Verb: POST": {
                "ts-admin-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TravelInfo routeIds, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: travel.controller.TravelController.createTrip"
                    }
                ],
                "ts-route-plan-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.queryInfo"
                    },
                    {
                        "arguments": "Arguments: [@RequestBody ArrayList<String> routeIds, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getTripsByRouteId"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripAllDetailInfo gtdi, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getTripAllDetailInfo"
                    }
                ],
                "ts-travel-plan-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.queryInfo"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-admin-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.adminQueryAll"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getTrainTypeByTripId"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getRouteByTripId"
                    }
                ],
                "ts-food-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getRouteByTripId"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.deleteTrip"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForTravel"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.getLeftTicketOfInterval"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String name, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForStationId"
                    }
                ],
                "ts-train-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.retrieve"
                    }
                ],
                "ts-route-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryById"
                    }
                ],
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@PathVariable Date travelDate, @PathVariable String trainNumber, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.calculateSoldTicket"
                    }
                ]
            }
        }
    },
    "ts-train-service": {
        "DependsOn": {
            "HTTP Verb: PUT": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TrainType trainType, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.update"
                    }
                ]
            },
            "HTTP Verb: POST": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TrainType trainType, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.create"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-basic-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.retrieve"
                    }
                ],
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.retrieve"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.retrieve"
                    }
                ],
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.query"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.delete"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-assurance-service": {
        "DependsOn": {
            "HTTP Verb: GET": {
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable int typeIndex, @PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: assurance.controller.AssuranceController.createNewAssurance"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@PathVariable int typeIndex, @PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: assurance.controller.AssuranceController.createNewAssurance"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-auth-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-user-service": [
                    {
                        "arguments": "Arguments: [@RequestBody AuthDto authDto]",
                        "returnData": "Return: HttpEntity<Response>",
                        "endPointName": "Endpoint function: auth.controller.AuthController.createDefaultUser"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: GET": {
                "ts-verification-code-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String verifyCode, HttpServletRequest request, HttpServletResponse response, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: boolean",
                        "endPointName": "Endpoint function: verifycode.controller.VerifyCodeController.verifyCode"
                    }
                ]
            }
        }
    },
    "ts-route-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-admin-route-service": [
                    {
                        "arguments": "Arguments: [@RequestBody RouteInfo createAndModifyRouteInfo, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: route.controller.RouteController.createAndModifyRoute"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-basic-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryById"
                    }
                ],
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryById"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryById"
                    }
                ],
                "ts-admin-route-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryAll"
                    }
                ],
                "ts-route-plan-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryById"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String startId, @PathVariable String terminalId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryByStartAndTerminal"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-route-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.deleteRoute"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-food-map-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-food-service": [
                    {
                        "arguments": "Arguments: [@RequestBody List<String> stationIdList]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: food.controller.FoodStoreController.getFoodStoresByStationIds"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-food-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: food.controller.TrainFoodController.getTrainFoodOfTrip"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-admin-basic-info-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-config-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Config info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: config.controller.ConfigController.createConfig"
                    }
                ],
                "ts-price-service": [
                    {
                        "arguments": "Arguments: [@RequestBody PriceConfig info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: price.controller.PriceController.create"
                    }
                ],
                "ts-train-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TrainType trainType, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.create"
                    }
                ],
                "ts-contacts-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Contacts aci, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.createNewContactsAdmin"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Station station, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.create"
                    }
                ]
            },
            "HTTP Verb: PUT": {
                "ts-config-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Config info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: config.controller.ConfigController.updateConfig"
                    }
                ],
                "ts-price-service": [
                    {
                        "arguments": "Arguments: [@RequestBody PriceConfig info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: price.controller.PriceController.update"
                    }
                ],
                "ts-train-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TrainType trainType, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.update"
                    }
                ],
                "ts-contacts-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Contacts info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.modifyContacts"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Station station, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.update"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-config-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: config.controller.ConfigController.queryAll"
                    }
                ],
                "ts-price-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: price.controller.PriceController.queryAll"
                    }
                ],
                "ts-train-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.query"
                    }
                ],
                "ts-contacts-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.getAllContacts"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.query"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-config-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String configName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: config.controller.ConfigController.deleteConfig"
                    }
                ],
                "ts-price-service": [
                    {
                        "arguments": "Arguments: [@RequestBody PriceConfig info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: price.controller.PriceController.delete"
                    }
                ],
                "ts-train-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: train.controller.TrainController.delete"
                    }
                ],
                "ts-contacts-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String contactsId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.deleteContacts"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Station station, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.delete"
                    }
                ]
            }
        }
    },
    "ts-security-service": {
        "DependsOn": {
            "HTTP Verb: GET": {
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String accountId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: security.controller.SecurityController.check"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String accountId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: security.controller.SecurityController.check"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: GET": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@PathVariable Date checkDate, @PathVariable String accountId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.securityInfoCheck"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable Date checkDate, @PathVariable String accountId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.securityInfoCheck"
                    }
                ]
            }
        }
    },
    "ts-user-service": {
        "DependsOn": {
            "HTTP Verb: PUT": {
                "ts-admin-user-service": [
                    {
                        "arguments": "Arguments: [@RequestBody UserDto user, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.updateUser"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-admin-user-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.getAllUser"
                    }
                ],
                "ts-cancel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.getUserByUserId"
                    }
                ],
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.getUserByUserId"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.getUserByUserId"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-user-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.deleteUserById"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-auth-service": [
                    {
                        "arguments": "Arguments: [@RequestBody AuthDto authDto]",
                        "returnData": "Return: HttpEntity<Response>",
                        "endPointName": "Endpoint function: auth.controller.AuthController.createDefaultUser"
                    }
                ]
            }
        }
    },
    "ts-execute-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: GET": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @PathVariable int status, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.modifyOrder"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.getOrderById"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @PathVariable int status, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.modifyOrder"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.getOrderById"
                    }
                ]
            }
        }
    },
    "ts-ticketinfo-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForTravel"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForTravel"
                    }
                ],
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForTravel"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForTravel"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String name, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForStationId"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String name, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForStationId"
                    }
                ],
                "ts-travel-plan-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String name, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForStationId"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-basic-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.BasicController.queryForTravel"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-basic-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.BasicController.queryForStationId"
                    }
                ]
            }
        }
    },
    "ts-preserve-other-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripAllDetailInfo gtdi, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.getTripAllDetailInfo"
                    }
                ],
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForTravel"
                    }
                ],
                "ts-food-service": [
                    {
                        "arguments": "Arguments: [@RequestBody FoodOrder addFoodOrder, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: foodsearch.controller.FoodController.createFoodOrder"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.create"
                    }
                ],
                "ts-consign-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Consign request, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: consign.controller.ConsignController.insertConsign"
                    }
                ],
                "ts-notification-service": [
                    {
                        "arguments": "Arguments: [@RequestBody NotifyInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: boolean",
                        "endPointName": "Endpoint function: notification.controller.NotificationController.preserve_success"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order createOrder, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.createNewOrder"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-assurance-service": [
                    {
                        "arguments": "Arguments: [@PathVariable int typeIndex, @PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: assurance.controller.AssuranceController.createNewAssurance"
                    }
                ],
                "ts-contacts-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.getContactsByContactsId"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-security-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String accountId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: security.controller.SecurityController.check"
                    }
                ],
                "ts-user-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.getUserByUserId"
                    }
                ]
            }
        }
    },
    "ts-admin-travel-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: PUT": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TravelInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.updateTrip"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TravelInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.updateTrip"
                    }
                ]
            },
            "HTTP Verb: POST": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TravelInfo routeIds, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.createTrip"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TravelInfo routeIds, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: travel.controller.TravelController.createTrip"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.adminQueryAll"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.adminQueryAll"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.deleteTrip"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.deleteTrip"
                    }
                ]
            }
        }
    },
    "ts-admin-route-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-route-service": [
                    {
                        "arguments": "Arguments: [@RequestBody RouteInfo createAndModifyRouteInfo, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: route.controller.RouteController.createAndModifyRoute"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-route-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryAll"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-route-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.deleteRoute"
                    }
                ]
            }
        }
    },
    "ts-route-plan-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-travel-plan-service": [
                    {
                        "arguments": "Arguments: [@RequestBody RoutePlanInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: plan.controller.RoutePlanController.getCheapestRoutes"
                    },
                    {
                        "arguments": "Arguments: [@RequestBody RoutePlanInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: plan.controller.RoutePlanController.getMinStopStations"
                    },
                    {
                        "arguments": "Arguments: [@RequestBody RoutePlanInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: plan.controller.RoutePlanController.getQuickestRoutes"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.queryInfo"
                    },
                    {
                        "arguments": "Arguments: [@RequestBody ArrayList<String> routeIds, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.getTripsByRouteId"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.queryInfo"
                    },
                    {
                        "arguments": "Arguments: [@RequestBody ArrayList<String> routeIds, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getTripsByRouteId"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-route-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String routeId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryById"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String startId, @PathVariable String terminalId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: route.controller.RouteController.queryByStartAndTerminal"
                    }
                ]
            }
        }
    },
    "ts-order-service": {
        "DependsOn": {
            "HTTP Verb: PUT": {
                "ts-cancel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order orderInfo, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.saveOrderInfo"
                    }
                ],
                "ts-admin-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order order, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.updateOrder"
                    }
                ]
            },
            "HTTP Verb: POST": {
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.getTicketListByDateAndTripId"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order createOrder, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.createNewOrder"
                    }
                ],
                "ts-admin-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order order, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.addcreateNewOrder"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-execute-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @PathVariable int status, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.modifyOrder"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.getOrderById"
                    }
                ],
                "ts-cancel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.getOrderById"
                    }
                ],
                "ts-inside-payment-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @PathVariable int status, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.modifyOrder"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable Date travelDate, @PathVariable String trainNumber, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.calculateSoldTicket"
                    }
                ],
                "ts-security-service": [
                    {
                        "arguments": "Arguments: [@PathVariable Date checkDate, @PathVariable String accountId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.securityInfoCheck"
                    }
                ],
                "ts-admin-order-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.findAllOrder"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-order-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.deleteOrder"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@RequestBody List<String> stationIdList, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForNameBatch"
                    }
                ]
            }
        }
    },
    "ts-consign-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Consign request, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: consign.controller.ConsignController.insertConsign"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Consign request, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: consign.controller.ConsignController.insertConsign"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: GET": {
                "ts-consign-price-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String weight, @PathVariable String isWithinRegion, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: consignprice.controller.ConsignPriceController.getPriceByWeightAndRegion"
                    }
                ]
            }
        }
    },
    "ts-preserve-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Travel info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForTravel"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripAllDetailInfo gtdi, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getTripAllDetailInfo"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.create"
                    }
                ],
                "ts-food-service": [
                    {
                        "arguments": "Arguments: [@RequestBody FoodOrder addFoodOrder, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: foodsearch.controller.FoodController.createFoodOrder"
                    }
                ],
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order createOrder, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.createNewOrder"
                    }
                ],
                "ts-consign-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Consign request, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: consign.controller.ConsignController.insertConsign"
                    }
                ],
                "ts-notification-service": [
                    {
                        "arguments": "Arguments: [@RequestBody NotifyInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: boolean",
                        "endPointName": "Endpoint function: notification.controller.NotificationController.preserve_success"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-assurance-service": [
                    {
                        "arguments": "Arguments: [@PathVariable int typeIndex, @PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: assurance.controller.AssuranceController.createNewAssurance"
                    }
                ],
                "ts-contacts-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.getContactsByContactsId"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-security-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String accountId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: security.controller.SecurityController.check"
                    }
                ],
                "ts-user-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: user.controller.UserController.getUserByUserId"
                    }
                ]
            }
        }
    },
    "ts-order-other-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order createOrder, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.createNewOrder"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.getTicketListByDateAndTripId"
                    }
                ],
                "ts-admin-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order order, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.addcreateNewOrder"
                    }
                ]
            },
            "HTTP Verb: PUT": {
                "ts-cancel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order orderInfo, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.saveOrderInfo"
                    }
                ],
                "ts-admin-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order order, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.updateOrder"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-execute-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @PathVariable int status, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.modifyOrder"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.getOrderById"
                    }
                ],
                "ts-cancel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.getOrderById"
                    }
                ],
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@PathVariable Date travelDate, @PathVariable String trainNumber, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.calculateSoldTicket"
                    }
                ],
                "ts-inside-payment-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @PathVariable int status, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.modifyOrder"
                    }
                ],
                "ts-security-service": [
                    {
                        "arguments": "Arguments: [@PathVariable Date checkDate, @PathVariable String accountId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.securityInfoCheck"
                    }
                ],
                "ts-admin-order-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.findAllOrder"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-order-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.deleteOrder"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@RequestBody List<String> stationIdList, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForNameBatch"
                    }
                ]
            }
        }
    },
    "ts-config-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Config info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: config.controller.ConfigController.createConfig"
                    }
                ]
            },
            "HTTP Verb: PUT": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Config info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: config.controller.ConfigController.updateConfig"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String configName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: config.controller.ConfigController.retrieve"
                    }
                ],
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: config.controller.ConfigController.queryAll"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String configName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: config.controller.ConfigController.deleteConfig"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-food-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody FoodOrder addFoodOrder, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: foodsearch.controller.FoodController.createFoodOrder"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@RequestBody FoodOrder addFoodOrder, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: foodsearch.controller.FoodController.createFoodOrder"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-food-map-service": [
                    {
                        "arguments": "Arguments: [@RequestBody List<String> stationIdList]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: food.controller.FoodStoreController.getFoodStoresByStationIds"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getRouteByTripId"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-food-map-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: food.controller.TrainFoodController.getTrainFoodOfTrip"
                    }
                ]
            }
        }
    },
    "ts-contacts-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Contacts aci, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity<?>",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.createNewContactsAdmin"
                    }
                ]
            },
            "HTTP Verb: PUT": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Contacts info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.modifyContacts"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.getContactsByContactsId"
                    }
                ],
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.getAllContacts"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String id, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.getContactsByContactsId"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String contactsId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: HttpEntity",
                        "endPointName": "Endpoint function: contacts.controller.ContactsController.deleteContacts"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-station-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody List<String> stationIdList, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForNameBatch"
                    }
                ],
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Station station, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.create"
                    }
                ],
                "ts-travel-plan-service": [
                    {
                        "arguments": "Arguments: [@RequestBody List<String> stationIdList, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForNameBatch"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody List<String> stationIdList, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForNameBatch"
                    }
                ]
            },
            "HTTP Verb: PUT": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Station station, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.update"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-basic-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-food-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-route-plan-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.query"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationNameForId#quot;) String stationName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForStationId"
                    }
                ],
                "ts-rebook-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationIdForName#quot;) String stationId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryById"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-admin-basic-info-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Station station, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: ResponseEntity<Response>",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.delete"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-payment-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-inside-payment-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Payment info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: com.trainticket.controller.PaymentController.pay"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-notification-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-cancel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody NotifyInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: boolean",
                        "endPointName": "Endpoint function: notification.controller.NotificationController.order_cancel_success"
                    }
                ],
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody NotifyInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: boolean",
                        "endPointName": "Endpoint function: notification.controller.NotificationController.preserve_success"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@RequestBody NotifyInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: boolean",
                        "endPointName": "Endpoint function: notification.controller.NotificationController.preserve_success"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-rebook-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-inside-payment-service": [
                    {
                        "arguments": "Arguments: [@RequestBody PaymentInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: inside_payment.controller.InsidePaymentController.payDifference"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.create"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-inside-payment-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @PathVariable String money, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: inside_payment.controller.InsidePaymentController.drawBack"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@PathVariable(value = #quot;stationIdForName#quot;) String stationId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryById"
                    }
                ]
            }
        }
    },
    "ts-travel-plan-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.queryInfo"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody TripInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.queryInfo"
                    }
                ],
                "ts-seat-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.getLeftTicketOfInterval"
                    }
                ],
                "ts-station-service": [
                    {
                        "arguments": "Arguments: [@RequestBody List<String> stationIdList, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: fdse.microservice.controller.StationController.queryForNameBatch"
                    }
                ],
                "ts-route-plan-service": [
                    {
                        "arguments": "Arguments: [@RequestBody RoutePlanInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: plan.controller.RoutePlanController.getCheapestRoutes"
                    },
                    {
                        "arguments": "Arguments: [@RequestBody RoutePlanInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: plan.controller.RoutePlanController.getMinStopStations"
                    },
                    {
                        "arguments": "Arguments: [@RequestBody RoutePlanInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: plan.controller.RoutePlanController.getQuickestRoutes"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-ticketinfo-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String name, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: ticketinfo.controller.TicketInfoController.queryForStationId"
                    }
                ]
            }
        }
    },
    "ts-admin-order-service": {
        "DependsOn": {},
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order order, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.addcreateNewOrder"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order order, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.addcreateNewOrder"
                    }
                ]
            },
            "HTTP Verb: PUT": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order order, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.updateOrder"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Order order, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.updateOrder"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.findAllOrder"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.findAllOrder"
                    }
                ]
            },
            "HTTP Verb: DELETE": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.deleteOrder"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.deleteOrder"
                    }
                ]
            }
        }
    },
    "ts-inside-payment-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-rebook-service": [
                    {
                        "arguments": "Arguments: [@RequestBody PaymentInfo info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: inside_payment.controller.InsidePaymentController.payDifference"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-cancel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @PathVariable String money, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: inside_payment.controller.InsidePaymentController.drawBack"
                    }
                ],
                "ts-rebook-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String userId, @PathVariable String money, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: inside_payment.controller.InsidePaymentController.drawBack"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-payment-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Payment info, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: com.trainticket.controller.PaymentController.pay"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @PathVariable int status, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.modifyOrder"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String orderId, @PathVariable int status, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.modifyOrder"
                    }
                ]
            }
        }
    },
    "ts-verification-code-service": {
        "DependsOn": {
            "HTTP Verb: GET": {
                "ts-auth-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String verifyCode, HttpServletRequest request, HttpServletResponse response, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: boolean",
                        "endPointName": "Endpoint function: verifycode.controller.VerifyCodeController.verifyCode"
                    }
                ]
            }
        },
        "Dependants": {}
    },
    "ts-seat-service": {
        "DependsOn": {
            "HTTP Verb: POST": {
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.getLeftTicketOfInterval"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.getLeftTicketOfInterval"
                    }
                ],
                "ts-preserve-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.create"
                    }
                ],
                "ts-preserve-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.create"
                    }
                ],
                "ts-travel-plan-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.getLeftTicketOfInterval"
                    }
                ],
                "ts-rebook-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: seat.controller.SeatController.create"
                    }
                ]
            }
        },
        "Dependants": {
            "HTTP Verb: POST": {
                "ts-order-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: order.controller.OrderController.getTicketListByDateAndTripId"
                    }
                ],
                "ts-order-other-service": [
                    {
                        "arguments": "Arguments: [@RequestBody Seat seatRequest, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: other.controller.OrderOtherController.getTicketListByDateAndTripId"
                    }
                ]
            },
            "HTTP Verb: GET": {
                "ts-config-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String configName, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: config.controller.ConfigController.retrieve"
                    }
                ],
                "ts-travel2-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.getRouteByTripId"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel2.controller.Travel2Controller.getTrainTypeByTripId"
                    }
                ],
                "ts-travel-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getTrainTypeByTripId"
                    },
                    {
                        "arguments": "Arguments: [@PathVariable String tripId, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: travel.controller.TravelController.getRouteByTripId"
                    }
                ]
            }
        }
    },
    "ts-consign-price-service": {
        "DependsOn": {
            "HTTP Verb: GET": {
                "ts-consign-service": [
                    {
                        "arguments": "Arguments: [@PathVariable String weight, @PathVariable String isWithinRegion, @RequestHeader HttpHeaders headers]",
                        "returnData": "Return: org.springframework.http.HttpEntity",
                        "endPointName": "Endpoint function: consignprice.controller.ConsignPriceController.getPriceByWeightAndRegion"
                    }
                ]
            }
        },
        "Dependants": {}
    }
}